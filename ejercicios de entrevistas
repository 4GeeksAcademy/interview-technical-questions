
const clients = [
  { id: 1, taxNumber: '86620855', name: 'HECTOR ACUÑA BOLAÑOS'},
  { id: 2, taxNumber: '7317855K', name: 'JESUS RODRIGUEZ ALVAREZ'},
  { id: 3, taxNumber: '73826497', name: 'ANDRES NADAL MOLINA'},
  { id: 4, taxNumber: '88587715', name: 'SALVADOR ARNEDO MANRIQUEZ'},
  { id: 5, taxNumber: '94020190', name: 'VICTOR MANUEL ROJAS LUCAS'},
  { id: 6, taxNumber: '99804238', name: 'MOHAMED FERRE SAMPER' }
];
const accounts = [
  { clientId: 6, bankId: 1, balance: 15000 },
  { clientId: 1, bankId: 3, balance: 18000 },
  { clientId: 5, bankId: 3, balance: 135000 },
  { clientId: 2, bankId: 2, balance: 5600 },
  { clientId: 3, bankId: 1, balance: 23000 },
  { clientId: 5, bankId: 2, balance: 15000 },
  { clientId: 3, bankId: 3, balance: 45900 },
  { clientId: 2, bankId: 3, balance: 19000 },
  { clientId: 4, bankId: 3, balance: 51000 },
  { clientId: 5, bankId: 1, balance: 89000 },
  { clientId: 1, bankId: 2, balance: 1600 },
  { clientId: 5, bankId: 3, balance: 37500 },
  { clientId: 6, bankId: 1, balance: 19200 },
  { clientId: 2, bankId: 3, balance: 10000 },
  { clientId: 3, bankId: 2, balance: 5400 },
  { clientId: 3, bankId: 1, balance: 9000 },
  { clientId: 4, bankId: 3, balance: 13500 },
  { clientId: 2, bankId: 1, balance: 38200 },
  { clientId: 5, bankId: 2, balance: 17000 },
  { clientId: 1, bankId: 3, balance: 1000 },
  { clientId: 5, bankId: 2, balance: 600 },
  { clientId: 6, bankId: 1, balance: 16200 },
  { clientId: 2, bankId: 2, balance: 10000 }
]
const banks = [
  { id: 1, name: 'SANTANDER' },
  { id: 2, name: 'CHILE' },
  { id: 3, name: 'ESTADO' }
];

// Array with the ids of the clients
// Arreglo con los ids de clientes
function listClientsIds() {
  return clients.map((client) => client.id);
};


// Array with the ids of the clients sorted by taxnumber
// 1 Arreglo con los ids de clientes ordenados por rut
function listClientsIdsSortByTaxNumber() {

  clients.sort(function (a, b) {
    if (a.taxNumber > b.taxNumber) {
      return 1;
    }
    if (a.taxNumber < b.taxNumber) {
      return -1;
    }

    return 0;
  });
  return clients.map((client) => client.id);

};

// 2 Arreglo con los nombres de cliente ordenados de mayor a menor por la suma TOTAL de los saldos de cada cliente en los bancos que participa.
// array with the names of the clients sorted by the sum off all the balances for each client on the banks that it's is participating
function sortClientsTotalBalances() {

  for (let i = 0; i < clients.length; i++) {
    let sum = 0;
    for (let j = 0; j < accounts.length; j++) {
      if (clients[i].id == accounts[j].clientId) {
        sum += accounts[j].balance;

      }

    }
    clients[i].balance = sum;
  }
  clients.sort(function (a, b) {
    if (a.balance < b.balance) {
      return 1;
    }
    if (a.balance > b.balance) {
      return -1;
    }

    return 0;
  });
  return clients.map((client) => client.name);

}

// 3 Objeto en que las claves sean los nombres de los bancos y los valores un arreglo con los ruts de sus clientes ordenados alfabeticamente por nombre.
// an object were the keys are the names of the banks and the value is an array with the taxNumber of its clients sorted alphabetically

  let obj = {};
function banksClientsTaxNumbers()  {

banks.forEach(b => {

  obj[b.name] = accounts.filter(a => a.bankId===b.id);


  obj[b.name] = obj[b.name].map(a => clients.find(c => c.id === a.clientId))


  obj[b.name] = obj[b.name].sort((a,b) => a.name < b.name ? 1 : -1);


  obj[b.name] = obj[b.name].map(c => c.taxNumber);


  obj[b.name] = obj[b.name].filter((item, index) => obj[b.name].indexOf(item) === index);
});

return obj
}


// 4 Arreglo ordenado decrecientemente con los saldos de clientes que tengan más de 25.000 en el Banco SANTANDER
function richClientsBalances() {
   for (let i = 0; i < clients.length; i++) {
    let sum = 0;
    for (let j = 0; j < accounts.length; j++) {
      if (clients[i].id == accounts[j].clientId && accounts[j].bankId==1 ){
        sum += accounts[j].balance;
      }
    }
    clients[i].balance = sum;
     }
    clients.sort(function (a, b) {
    if (a.balance < b.balance) {
      return 1;
    }
    if (a.balance > b.balance) {
      return -1;
    }

    return 0;
  });
  return clients.filter(c => c.balance > 0).map(c => c.balance)


}

// 5 Arreglo con ids de bancos ordenados crecientemente por la cantidad TOTAL de dinero que administran.
function banksRankingByTotalBalance() {

  for (let i = 0; i < banks.length; i++) {
    let sum = 0;
    for (let j = 0; j < accounts.length; j++) {
      if (banks[i].id == accounts[j].bankId){
        sum += accounts[j].balance;
      }
    }
    banks[i].balance = sum;
     }
      banks.sort(function (a, b) {
    if (a.balance > b.balance) {
      return 1;
    }
    if (a.balance < b.balance) {
      return -1;
    }

    return 0;
  });

return banks.map((client) => client.id);
}

// 6 Objeto en que las claves sean los nombres de los bancos y los valores el número de clientes que solo tengan cuentas en ese banco.

  function banksFidelity()   {

banks.forEach(b => {

  obj[b.name] = accounts.filter(a => a.bankId===b.id);


  obj[b.name] = obj[b.name].map(a => clients.find(c => c.id === a.clientId))


  obj[b.name] = obj[b.name].sort((a,b) => a.name < b.name ? 1 : -1);


  obj[b.name] = obj[b.name].map(c => c.id);


  obj[b.name] = obj[b.name].filter((item, index) => obj[b.name].indexOf(item) === index);
    obj[b.name] = obj[b.name].length;
});

return obj

}

// 7 Objeto en que las claves sean los nombres de los bancos y los valores el id de su cliente con menos dinero.





function banksPoorClients() {
  let obj = {};
banks.forEach(b => {

  obj[b.name] = accounts.filter(a => a.bankId===b.id);


  obj[b.name] = obj[b.name].map(a => clients.find(c => c.id === a.clientId))


  obj[b.name] = obj[b.name].sort((a,b) => a.balance < b.balance ? 1 : -1);


  obj[b.name] = obj[b.name].map(c => c.id);


  obj[b.name] = obj[b.name].filter((item, index) => obj[b.name].indexOf(item) === index);


});

  let newobj = {}
for( const [name, val] of Object.entries(obj)) {
newobj[name] = val[0]
}


return newobj

}
console.log("pregunta 7 ... correcta")
console.log(banksPoorClients());

// 8 Agregar nuevo cliente con datos ficticios a "clientes" y agregar una cuenta en el BANCO ESTADO con un saldo de 9000 para este nuevo empleado.
// Luego devolver el lugar que ocupa este cliente en el ranking de la pregunta 2.
// No modificar arreglos originales para no alterar las respuestas anteriores al correr la solución
function newClientRanking() {
  // CODE HERE
}


// Impresión de soluciones. No modificar.
console.log('Pregunta 0');
console.log(listClientsIds());
console.log('Pregunta 1');
console.log(listClientsIdsSortByTaxNumber());
console.log('Pregunta 2');
console.log(sortClientsTotalBalances());
console.log('Pregunta 3');
console.log(banksClientsTaxNumbers());
console.log('Pregunta 4');
console.log(richClientsBalances());
console.log('Pregunta 5');
console.log(banksRankingByTotalBalance());
console.log('Pregunta 6');
console.log(banksFidelity());
console.log('Pregunta 7');
console.log(banksPoorClients());
console.log('Pregunta 8');
console.log(newClientRanking());
